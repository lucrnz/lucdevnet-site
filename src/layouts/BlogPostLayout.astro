---
import type { CollectionEntry } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import BlogPostHeader from "../components/BlogPost/BlogPostHeader.astro";
import { LicenseName, AuthorName } from "../consts";
// import Fence from "../components/Fence.astro";
// import { v4 as uuidv4 } from "uuid";
// import { Icon } from "astro-icon";
// const wrapperId = uuidv4();

export interface Props {
  post: CollectionEntry<"blog">["data"];
  readTimeMinutes: number;
}

const { post, readTimeMinutes } = Astro.props as Props;

if (!post) {
  throw new Error("Post not supplied!");
}

const { title, pubDate, longDescription, coverAlt, coverImg, author, license } =
  post;

const licenseName: LicenseName = (LicenseName as any)[license];
const authorName: AuthorName = (AuthorName as any)[author];
---

<BaseLayout title={title} description={longDescription} license={licenseName}>
  <!-- <Fence data={{ wrapperId }}>
    <div id="fence-link-quirks">
      <template id="template-icon-external" aria-hidden="true">
        <Icon name="uil:external-link-alt" />
      </template>
      <template id="template-icon-email" aria-hidden="true">
        <Icon name="ic:round-email" />
      </template>
    </div>
  </Fence> -->

  <BlogPostHeader
    title={title}
    publishDate={pubDate}
    coverAlt={coverAlt}
    coverImg={coverImg}
    readTimeMinutes={readTimeMinutes}
    authorName={authorName}
  />

  <article id={"blog-post-article"} class="blog-post-contents">
    <slot />
  </article>
</BaseLayout>

<style is:global lang="scss">
  @use "../styles/common.scss" as *;

  article {
    & > .blog-post-page-contents {
      margin-bottom: 10px;
    }

    a,
    a:active,
    a:visited {
      @include link;
    }
  }
</style>

<script>
  import {
    GenericArgument,
    GenericArgumentType
  } from "../types/GenericArgument";
  // import FenceFetcher from "../scripts/FenceFetcher";
  import BlogPostQuirks from "../scripts/Quirks/BlogPostQuirks";

  // const fence = new FenceFetcher<{ wrapperId: string }>();
  // const args = [
  //   {
  //     name: "wrapperId",
  //     value: fence.contents.wrapperId,
  //     type: GenericArgumentType.String
  //   } as GenericArgument,
  //   {
  //     name: "templateParentGetter",
  //     value: () => fence.queryChildren<HTMLDivElement>("#fence-link-quirks")[0],
  //     type: GenericArgumentType.Function
  //   } as GenericArgument
  // ];

  const quirks = new BlogPostQuirks<HTMLElement>();

  quirks.Setup([
    {
      name: "wrapperId",
      value: "blog-post-article",
      type: GenericArgumentType.String
    } as GenericArgument
  ]);
  quirks.Apply();
</script>
