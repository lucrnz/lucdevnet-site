---
import Icon from "../components/Icon.astro";

export interface Props {
  protectedUrl?: string;
  url?: string;
}

const { protectedUrl, url: plainUrl } = Astro.props;

if (!protectedUrl && !plainUrl) {
  throw new Error("Link component requires either a protectedUrl or plainUrl");
}

let plainUrlIsExternal = false;
let urlIsProtected = false;

if (protectedUrl) {
  urlIsProtected = true;
}

if (!urlIsProtected && plainUrl) {
  const lowerCaseUrl = plainUrl.toLowerCase();
  const isAbsolute =
    lowerCaseUrl.startsWith("http") || lowerCaseUrl.startsWith("https");

  if (isAbsolute) {
    plainUrlIsExternal = new URL(plainUrl).hostname === Astro.url.hostname;
  }
}
---

{
  urlIsProtected && (
    <protected-link-wrapper data-protected-url={protectedUrl}>
      <div>
        <slot />
      </div>
      <template id="template-icon-external-link" aria-hidden="true">
        <Icon name="uil:external-link-alt" />
      </template>
      <template id="template-icon-email" aria-hidden="true">
        <Icon name="ic:round-email" />
      </template>
    </protected-link-wrapper>
  )
}

{
  !urlIsProtected && (
    <a href={plainUrl} rel="noopener noreferrer">
      (plainUrlIsExternal && <Icon name="uil:external-link-alt" />)
      <slot />
    </a>
  )
}

<style lang="scss">
  @use "../styles/common.scss" as *;

  a,
  a:active,
  a:visited {
    @media screen {
      color: $accent-2-color;
      text-decoration: none;
      background-color: $forth-color;

      // This fixes an issue with flex containers, making the link look too wide
      max-width: fit-content;
    }

    &:hover {
      text-decoration: underline;
      cursor: pointer;
    }
  }
</style>

<script>
  import ProtectedLinkWrapper from "../scripts/protectedLinkWrapper";
  customElements.define("protected-link-wrapper", ProtectedLinkWrapper);
</script>
